/* 1. Database Exploration*/

-- Explore all objects in the Database
SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore all columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS

-- Explore all columns of a specified table in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'



/* 2. Dimensions Exploration
- Identify the unique values (or categories) in each dimension.
- Recognize how data might be grouped or segmented, which is useful in later analysis.
*/

-- Explore all countries our customers come from 
SELECT DISTINCT country
FROM gold.dim_customers

-- Explore all categories & subcategories & names of products
SELECT DISTINCT category, subcategory, product_name
FROM gold.dim_products
ORDER BY 1,2,3


/* 3. Date Exploration
- Identify the earliest and latest dates (boundaries)
- Understand the scope of data and the timespan.

How: MIN/MAX [Date Dimension] */

-- Find the data of the first and last order
-- how many years/months of sales are available
SELECT
MIN(order_date) AS first_order_date,
MAX(order_date) AS last_order_date,
DATEDIFF(year, MIN(order_date), MAX(order_date)) AS order_range_years,
DATEDIFF(month, MIN(order_date), MAX(order_date)) AS order_range_months
FROM gold.fact_sales


-- Find the youngest and oldest customers
SELECT
MIN(birthdate) AS oldest_customer,
DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_age,
MAX(birthdate) AS youngest_customer,
DATEDIFF(year, MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers



/* 4. Measure Exploration
- Calculate the key metric of the business (Big Numbers)
- Get highest level of aggregation but lowest level of details)
How: use aggregate functions like SUM(), AVG(), COUNT()
*/


SELECT
-- Find the total sales
SUM(sales_amount) as total_sales,
-- Find how many items are sold
SUM(quantity) as total_items_sold, 
-- Find the average selling price
AVG(price) as avg_selling_price,
-- Find the total number of orders
COUNT(DISTINCT order_number) as total_orders,
-- Find the total number of customers that has placed an order
COUNT(DISTINCT customer_key) as customer_w_order
FROM gold.fact_sales

-- Find the total number of products
SELECT 
COUNT(product_key) as total_products
FROM gold.dim_products;

-- Find the total number of customers
SELECT
COUNT(customer_key) as total_customers
FROM gold.dim_customers;


-- Generate a Report that shows all key metrics of the business
SELECT 'Total Sales' as measure_name, SUM(sales_amount) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' as measure_name, SUM(quantity) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Selling Price' as measure_name, AVG(price) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Number of Orders' as measure_name, COUNT(DISTINCT order_number) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Number of Products' as measure_name, COUNT(product_key) as measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Number of Customers' as measure_name, COUNT(customer_key) as measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Total Number of Customers with Order' as measure_name, COUNT(DISTINCT customer_key) as measure_value FROM gold.fact_sales



/* 5. Magnitude Analysis
- Compare the meausre values by categories (dimensions).
- Help us understand the importance of different categories.
How: aggregate measure by dimension. E.g., total sales by country, total quantity by category
*/

-- Find total customers by countries
SELECT
country,
COUNT(customer_key) as total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

-- Find total customers by gender
SELECT
gender,
COUNT(customer_key) as total_customers
FROM gold.dim_customers
GROUP BY gender

-- Find total products by category
SELECT
category,
COUNT(product_key) as total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC

-- What is the average costs in each category?
SELECT
category,
AVG(cost) as avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC

-- What is the total revenue generated for each category?
SELECT
p.category,
SUM(s.sales_amount) as total_revenue
FROM gold.dim_products p
LEFT JOIN gold.fact_sales s
ON p.product_key = s.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

-- Find total revenue generated by each customer
SELECT
c.customer_key,
c.first_name, 
c.last_name,
SUM(s.sales_amount) as total_spending
FROM gold.dim_customers c
LEFT JOIN gold.fact_sales s
ON c.customer_key = s.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_spending DESC

-- What is the distribution of sold items across countries?
SELECT
c.country,
SUM(s.quantity) as total_quantity
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON s.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_quantity DESC



/* 6. Ranking Analysis
- Order the value of dimensions by measure
- Top/Bottom N performers 
How: rank [dimension] by aggregate measures. E.g., Rank countries by total sales, top 5 products by quantity
USE: TOP, RANK(), DENSE_RANK(), ROW_NUMBER()
*/

-- Which 5 products generate the highest revenue?

-- 1. Using TOP
SELECT TOP 5
p.product_name,
SUM(s.sales_amount) as total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

-- 2. Using ROW_NUMBER()
SELECT *
FROM(
	SELECT
	p.product_name,
	SUM(s.sales_amount) as total_revenue,
	ROW_NUMBER() OVER(ORDER BY SUM(s.sales_amount)) as rank_products
	FROM gold.fact_sales s
	LEFT JOIN gold.dim_products p
	ON s.product_key = p.product_key
	GROUP BY p.product_name) t
WHERE rank_products <= 5

-- What are the 5 worst-performing products in terms of sales?
SELECT TOP 5
p.product_name,
SUM(s.sales_amount) as total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue



